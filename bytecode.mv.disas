// Move bytecode v6
module 1.resource_account {
use 0000000000000000000000000000000000000000000000000000000000000001::account;
use 0000000000000000000000000000000000000000000000000000000000000001::aptos_coin;
use 0000000000000000000000000000000000000000000000000000000000000001::code;
use 0000000000000000000000000000000000000000000000000000000000000001::coin;
use 0000000000000000000000000000000000000000000000000000000000000001::error;
use 0000000000000000000000000000000000000000000000000000000000000001::signer;
use 0000000000000000000000000000000000000000000000000000000000000001::simple_map;
use 0000000000000000000000000000000000000000000000000000000000000001::vector;


struct Container has key {
	store: SimpleMap<address, SignerCapability>
}

entry public create_resource_account(origin: &signer, seed: vector<u8>, optional_auth_key: vector<u8>) /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](origin: &signer)
	1: MoveLoc[1](seed: vector<u8>)
	2: Call account::create_resource_account(&signer, vector<u8>): signer * SignerCapability
	3: StLoc[4](resource_signer_cap: SignerCapability)
	4: StLoc[3](resource: signer)
	5: MoveLoc[0](origin: &signer)
	6: MoveLoc[3](resource: signer)
	7: MoveLoc[4](resource_signer_cap: SignerCapability)
	8: MoveLoc[2](optional_auth_key: vector<u8>)
	9: Call rotate_account_authentication_key_and_store_capability(&signer, signer, SignerCapability, vector<u8>)
	10: Ret
}
entry public create_resource_account_and_fund(origin: &signer, seed: vector<u8>, optional_auth_key: vector<u8>, fund_amount: u64) /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](origin: &signer)
	1: MoveLoc[1](seed: vector<u8>)
	2: Call account::create_resource_account(&signer, vector<u8>): signer * SignerCapability
	3: StLoc[5](resource_signer_cap: SignerCapability)
	4: StLoc[4](resource: signer)
	5: ImmBorrowLoc[4](resource: signer)
	6: Call coin::register<AptosCoin>(&signer)
	7: CopyLoc[0](origin: &signer)
	8: ImmBorrowLoc[4](resource: signer)
	9: Call signer::address_of(&signer): address
	10: MoveLoc[3](fund_amount: u64)
	11: Call coin::transfer<AptosCoin>(&signer, address, u64)
	12: MoveLoc[0](origin: &signer)
	13: MoveLoc[4](resource: signer)
	14: MoveLoc[5](resource_signer_cap: SignerCapability)
	15: MoveLoc[2](optional_auth_key: vector<u8>)
	16: Call rotate_account_authentication_key_and_store_capability(&signer, signer, SignerCapability, vector<u8>)
	17: Ret
}
entry public create_resource_account_and_publish_package(origin: &signer, seed: vector<u8>, metadata_serialized: vector<u8>, code: vector<vector<u8>>) /* def_idx: 2 */ {
B0:
	0: CopyLoc[0](origin: &signer)
	1: MoveLoc[1](seed: vector<u8>)
	2: Call account::create_resource_account(&signer, vector<u8>): signer * SignerCapability
	3: StLoc[5](resource_signer_cap: SignerCapability)
	4: StLoc[4](resource: signer)
	5: ImmBorrowLoc[4](resource: signer)
	6: MoveLoc[2](metadata_serialized: vector<u8>)
	7: MoveLoc[3](code: vector<vector<u8>>)
	8: Call code::publish_package_txn(&signer, vector<u8>, vector<vector<u8>>)
	9: MoveLoc[0](origin: &signer)
	10: MoveLoc[4](resource: signer)
	11: MoveLoc[5](resource_signer_cap: SignerCapability)
	12: LdConst[2](Vector(U8): [32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	13: Call rotate_account_authentication_key_and_store_capability(&signer, signer, SignerCapability, vector<u8>)
	14: Ret
}
public retrieve_resource_account_cap(resource: &signer, source_addr: address): SignerCapability /* def_idx: 3 */ {
L0:	resource_addr: address
L1:	resource_signer_cap: SignerCapability
L2:	signer_cap: SignerCapability
B0:
	0: CopyLoc[1](source_addr: address)
	1: Exists[0](Container)
	2: BrFalse(4)
B1:
	3: Branch(9)
B2:
	4: MoveLoc[0](resource: &signer)
	5: Pop
	6: LdConst[0](U64: [1, 0, 0, 0, 0, 0, 0, 0])
	7: Call error::not_found(u64): u64
	8: Abort
B3:
	9: CopyLoc[0](resource: &signer)
	10: Call signer::address_of(&signer): address
	11: StLoc[4](resource_addr: address)
	12: CopyLoc[1](source_addr: address)
	13: MutBorrowGlobal[0](Container)
	14: StLoc[2](container: &mut Container)
	15: CopyLoc[2](container: &mut Container)
	16: ImmBorrowField[0](Container.store: SimpleMap<address, SignerCapability>)
	17: ImmBorrowLoc[4](resource_addr: address)
	18: Call simple_map::contains_key<address, SignerCapability>(&SimpleMap<address, SignerCapability>, &address): bool
	19: BrFalse(21)
B4:
	20: Branch(28)
B5:
	21: MoveLoc[0](resource: &signer)
	22: Pop
	23: MoveLoc[2](container: &mut Container)
	24: Pop
	25: LdConst[1](U64: [2, 0, 0, 0, 0, 0, 0, 0])
	26: Call error::invalid_argument(u64): u64
	27: Abort
B6:
	28: CopyLoc[2](container: &mut Container)
	29: MutBorrowField[0](Container.store: SimpleMap<address, SignerCapability>)
	30: ImmBorrowLoc[4](resource_addr: address)
	31: Call simple_map::remove<address, SignerCapability>(&mut SimpleMap<address, SignerCapability>, &address): address * SignerCapability
	32: StLoc[6](signer_cap: SignerCapability)
	33: Pop
	34: MoveLoc[6](signer_cap: SignerCapability)
	35: MoveLoc[2](container: &mut Container)
	36: ImmBorrowField[0](Container.store: SimpleMap<address, SignerCapability>)
	37: Call simple_map::length<address, SignerCapability>(&SimpleMap<address, SignerCapability>): u64
	38: LdU64(0)
	39: Eq
	40: StLoc[3](empty_container: bool)
	41: StLoc[5](resource_signer_cap: SignerCapability)
	42: MoveLoc[3](empty_container: bool)
	43: BrFalse(48)
B7:
	44: MoveLoc[1](source_addr: address)
	45: MoveFrom[0](Container)
	46: Unpack[0](Container)
	47: Call simple_map::destroy_empty<address, SignerCapability>(SimpleMap<address, SignerCapability>)
B8:
	48: MoveLoc[0](resource: &signer)
	49: LdConst[2](Vector(U8): [32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
	50: Call account::rotate_authentication_key_internal(&signer, vector<u8>)
	51: MoveLoc[5](resource_signer_cap: SignerCapability)
	52: Ret
}
rotate_account_authentication_key_and_store_capability(origin: &signer, resource: signer, resource_signer_cap: SignerCapability, optional_auth_key: vector<u8>) /* def_idx: 4 */ {
L0:	resource_addr: address
B0:
	0: CopyLoc[0](origin: &signer)
	1: Call signer::address_of(&signer): address
	2: StLoc[7](origin_addr: address)
	3: CopyLoc[7](origin_addr: address)
	4: Exists[0](Container)
	5: Not
	6: BrFalse(12)
B1:
	7: MoveLoc[0](origin: &signer)
	8: Call simple_map::create<address, SignerCapability>(): SimpleMap<address, SignerCapability>
	9: Pack[0](Container)
	10: MoveTo[0](Container)
	11: Branch(14)
B2:
	12: MoveLoc[0](origin: &signer)
	13: Pop
B3:
	14: CopyLoc[7](origin_addr: address)
	15: MutBorrowGlobal[0](Container)
	16: StLoc[6](container: &mut Container)
	17: ImmBorrowLoc[1](resource: signer)
	18: Call signer::address_of(&signer): address
	19: StLoc[8](resource_addr: address)
	20: MoveLoc[6](container: &mut Container)
	21: MutBorrowField[0](Container.store: SimpleMap<address, SignerCapability>)
	22: MoveLoc[8](resource_addr: address)
	23: MoveLoc[2](resource_signer_cap: SignerCapability)
	24: Call simple_map::add<address, SignerCapability>(&mut SimpleMap<address, SignerCapability>, address, SignerCapability)
	25: ImmBorrowLoc[3](optional_auth_key: vector<u8>)
	26: Call vector::is_empty<u8>(&vector<u8>): bool
	27: BrFalse(32)
B4:
	28: MoveLoc[7](origin_addr: address)
	29: Call account::get_authentication_key(address): vector<u8>
	30: StLoc[4](%#1: vector<u8>)
	31: Branch(34)
B5:
	32: MoveLoc[3](optional_auth_key: vector<u8>)
	33: StLoc[4](%#1: vector<u8>)
B6:
	34: MoveLoc[4](%#1: vector<u8>)
	35: StLoc[5](auth_key: vector<u8>)
	36: ImmBorrowLoc[1](resource: signer)
	37: MoveLoc[5](auth_key: vector<u8>)
	38: Call account::rotate_authentication_key_internal(&signer, vector<u8>)
	39: Ret
}
}